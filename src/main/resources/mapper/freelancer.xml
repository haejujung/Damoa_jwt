<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.damoa.repository.interfaces.FreelancerRepository">

    <!-- 프리랜서 등록 -->
    <insert id="insertFreelancer">
       INSERT INTO freelancer_tb(user_id)
       VALUES(#{userId})
    </insert>

    <!-- 프리랜서 리스트 출력 -->
    <select id="findAllFreelancers">
    SELECT 
        f.id, 
        f.user_id, 
        u.username, 
        f.job_part, 
        f.working_style, 
        f.expected_salary, 
        f.salary_type, 
        f.detail, 
        GROUP_CONCAT(DISTINCT s.name) AS skills, 
        GROUP_CONCAT(DISTINCT c.career) AS careers 
    FROM 
        freelancer_tb f 
    LEFT JOIN 
        user_tb u ON f.user_id = u.id 
    LEFT JOIN 
        freelancer_skills_tb fs ON f.user_id = fs.user_id 
    LEFT JOIN 
        skill_tb s ON fs.skill_id = s.id 
    LEFT JOIN 
        freelancer_career_tb fc ON f.user_id = fc.user_id 
    LEFT JOIN 
        career c ON fc.career_id = c.id  
    GROUP BY 
        f.id, f.user_id, u.username, f.job_part, f.working_style, f.expected_salary, f.salary_type, f.detail 
    LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="findAllFreelancersBySearch">
        SELECT 
            f.id, 
            f.user_id, 
            u.username, 
            f.job_part, 
            f.working_style, 
            f.expected_salary, 
            f.salary_type, 
            f.detail, 
            GROUP_CONCAT(DISTINCT s.name) AS skills, 
            GROUP_CONCAT(DISTINCT c.career) AS careers 
        FROM 
            freelancer_tb f 
        LEFT JOIN 
            user_tb u ON f.user_id = u.id 
        LEFT JOIN 
            freelancer_skills_tb fs ON f.user_id = fs.user_id 
        LEFT JOIN 
            skill_tb s ON fs.skill_id = s.id 
        LEFT JOIN 
            freelancer_career_tb fc ON f.user_id = fc.user_id 
        LEFT JOIN 
            career c ON fc.career_id = c.id 
        WHERE 
            1=1 
            <if test="skill != null and skill != ''">
                AND f.user_id IN (
                    SELECT DISTINCT fs2.user_id 
                    FROM freelancer_skills_tb fs2 
                    LEFT JOIN skill_tb s2 ON fs2.skill_id = s2.id 
                    WHERE s2.name LIKE CONCAT('%', #{skill}, '%')
                )
            </if>
            <if test="workingStyle != null and workingStyle != ''">
                AND f.working_style = #{workingStyle}
            </if>
            <if test="jobPart != null and jobPart != ''">
                AND f.job_part = #{jobPart}
            </if>
        GROUP BY 
            f.id, f.user_id, u.username, f.job_part, f.working_style, f.expected_salary, f.salary_type, f.detail 
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countAllFreelancers">
        SELECT count(*) FROM freelancer_tb
    </select>

    <select id="countAllFreelancersBySearch" resultType="int">
        SELECT COUNT(DISTINCT f.id) 
        FROM 
            freelancer_tb f 
        LEFT JOIN 
            user_tb u ON f.user_id = u.id 
        LEFT JOIN 
            freelancer_skills_tb fs ON f.user_id = fs.user_id 
        LEFT JOIN 
            skill_tb s ON fs.skill_id = s.id 
        LEFT JOIN 
            freelancer_career_tb fc ON f.user_id = fc.user_id 
        LEFT JOIN 
            career c ON fc.career_id = c.id 
        WHERE 
            1=1 
            <if test="skill != null and skill != ''">
                AND f.user_id IN (
                    SELECT DISTINCT fs2.user_id 
                    FROM freelancer_skills_tb fs2 
                    LEFT JOIN skill_tb s2 ON fs2.skill_id = s2.id 
                    WHERE s2.name LIKE CONCAT('%', #{skill}, '%')
                )
            </if>
            <if test="workingStyle != null and workingStyle != ''">
                AND f.working_style = #{workingStyle}
            </if>
            <if test="jobPart != null and jobPart != ''">
                AND f.job_part = #{jobPart}
            </if>
    </select>

    <select id="findUserIdJoinFreelancerTb">
        select *
        from freelancer_tb as f
        left join user_tb as u
        on f.user_id = u.id
        where u.id = #{id}
    </select>

    <!-- 프리랜서 기본 정보 업데이트 쿼리 -->
    <insert id="insertFreelancerBasicInfo">
    INSERT INTO freelancer_tb (
        user_id,
        job_part,
        working_style,
        expected_salary,
        salary_type,
        origin_file_name,
        upload_file_name,
        detail,
        link
    ) VALUES (
        #{userId},           -- 사용자 ID (user_tb의 id와 연결)
        #{jobPart},         -- 직무 (ex. 프론트엔드, 백엔드)
        #{workingStyle},     -- 근무 방식 (재택, 출퇴근)
        #{expectedSalary},   -- 희망 연봉
        #{salaryType},       -- 급여 방식 (시급, 월급)
        #{originFileName},   -- 포트폴리오 원본 파일명
        #{uploadFileName},   -- 저장된 포트폴리오 파일명
        #{detail},           -- 상세 소개
        #{link}              -- 링크 (ex. github, tistory, notion)
    );
    </insert>

    <update id="updateFreelancerBasicInfo">
    UPDATE freelancer_tb
    SET 
    job_part = #{jobPart},           -- 직무 (ex. 프론트엔드, 백엔드)
    working_style = #{workingStyle},  -- 근무 방식 (재택, 출퇴근)
    expected_salary = #{expectedSalary}, -- 희망 연봉
    salary_type = #{salaryType},      -- 급여 방식 (시급, 월급)
    origin_file_name = #{originFileName}, -- 포트폴리오 원본 파일명
    upload_file_name = #{uploadFileName}, -- 저장된 포트폴리오 파일명
    detail = #{detail},               -- 상세 소개
    link = #{link}                    -- 링크 (ex. github, tistory, notion)
    WHERE 
    user_id = #{userId};
    </update>

    <!-- 프리랜서 기본 정보 조회 쿼리 -->
    <select id="findFreelancerBasicInfo">
        SELECT 
            job_part,
            working_style,
            expected_salary,
            salary_type,
            origin_file_name,
            upload_file_name,
            detail,
            link
        FROM freelancer_tb
        WHERE user_id = #{userId}
    </select>

    <!-- 경력 추가 -->
    <insert id="insertCareer">
        INSERT INTO career (career)
        VALUES (#{career})
    </insert>

    <!-- 경력 검색 -->
    <select id="findAllCareers">
        SELECT * FROM career
    </select>

    <!-- 경력 추가 -->
    <insert id="insertFreelancerCareer">
        INSERT INTO freelancer_career_tb (user_id, career_id)
        VALUES (#{userId}, #{careerId});
    </insert>

    <!-- 프리랜서의 모든 경력 조회 -->
    <select id="findCareersByFreelancerId">
        SELECT c.id, c.career
        FROM career c
        JOIN freelancer_career_tb fc ON c.id = fc.career_id
        WHERE fc.user_id = #{userId};
    </select>

    <!-- 프리랜서 경력 삭제 -->
    <delete id="deleteFreelancerCareerByFreelancerId">
        DELETE FROM freelancer_career_tb
        WHERE user_id = #{userId} AND career_id = #{careerId};
    </delete>

    <!-- 스킬 리스트 불러오기 -->
    <select id="findAllSkills">
        SELECT *
        FROM skill_tb
    </select>

    <!-- 프리랜서 - 스킬 매핑 추가 -->
    <insert id="insertFreelancerSkill">
        INSERT INTO freelancer_skills_tb (user_id, skill_id)
        VALUES (#{userId}, #{skillId})
    </insert>

    <!-- 프리랜서 - 스킬 매핑 삭제 -->
    <delete id="deleteFreelancerSkillByFreelancerId">
        DELETE FROM freelancer_skills_tb
        WHERE user_id = #{userId} AND skill_id = #{skillId}
    </delete>

    <!-- 프리랜서가 가진 스킬 조회 -->
    <select id="findSkillsByFreelancerId">
        SELECT s.id, s.name
        FROM freelancer_skills_tb fs
        JOIN skill_tb s ON fs.skill_id = s.id
        WHERE fs.user_id = #{userId}
    </select>

    <select id="findFreelancerDetailById">
        SELECT 
        f.id,
        f.user_id,
        u.username,
        f.job_part,
        f.working_style,
        f.expected_salary,
        f.salary_type,
        f.origin_file_name,
        f.upload_file_name,
        f.detail,
        f.link,
        f.created_at,
        GROUP_CONCAT(DISTINCT s.name) AS skills,
        GROUP_CONCAT(DISTINCT c.career) AS career
    FROM 
        freelancer_tb f
    LEFT JOIN 
        user_tb u ON f.user_id = u.id
    LEFT JOIN 
        freelancer_skills_tb fs ON f.user_id = fs.user_id
    LEFT JOIN 
        skill_tb s ON fs.skill_id = s.id
    LEFT JOIN 
        freelancer_career_tb fc ON f.user_id = fc.user_id
    LEFT JOIN   
        career c ON fc.career_id = c.id
	WHERE f.user_id = #{userId}
    GROUP BY 
        f.id, f.user_id, u.username, f.job_part, f.working_style, 
        f.expected_salary, f.salary_type, f.origin_file_name, 
        f.upload_file_name, f.detail, f.link, f.created_at
    </select>

    <select id="countAverageFreelancerExpectedSalary">
        SELECT FLOOR(AVG(expected_salary)) AS average_expected_salary
        FROM freelancer_tb;
    </select>
    
    <select id="getMonthlyFreelancerData" resultType="com.damoa.dto.MonthlyFreelancerDTO">
        SELECT DATE_FORMAT(created_at, '%Y-%m') AS month, COUNT(*) AS count
        FROM freelancer_tb
        GROUP BY DATE_FORMAT(created_at, '%Y-%m')
    </select>

</mapper>